#!/bin/bash

# This script is set up for Rutgers computer science.
# I believe it can be fixed by looking for all occurences of rutgers.edu

# kerberize a host. Mostly this does an ansible-pull of our normal ansible scripts
# but for that to work need to
# * ansible, and git [git is needed for ansible-pull]
#   With Ubuntu we need ansible's special repo; an old ansisible won't do
# * get key table from web service
# * ask the user for info on who should login
# * generate /etc/ansible/hosts for localhost with a setup based on the user's answers
# * do kerberos-boot.yml and kerberos.yml

DISTRO=`grep '^NAME=' /etc/os-release`
case "$DISTRO" in
*Ubuntu* ) DISTRO="Ubuntu" ;;
*CentOS* ) DISTRO="CentOS" ;;
*) echo We only support Ubuntu and Centos; exit 1 ;;
esac

SERVER=services.cs.rutgers.edu

# We'll do a more careful check of hostname in the web service
# But check for the obvious now.
if ! hostname | grep '\.' ; then
echo -e "\n***************\n"
echo Your hostname must be a fully-qualified name, e.g. foo.cs.rutgers.edu,
echo not just foo. To change that, fix it in /etc/hostname, and then do
echo    hostname -F /etc/hostname
echo
exit 1
fi

echo
echo -e "\n***************\n"
echo "Please verify the following:"
echo "* Your computer must have a permanent hostname, registered in DNS."
echo "* Your computer must have Python 2.6, 2.7, or 3.5+."
echo "* For Ubuntu, your time must be synchronized by ntp or similar."
echo "In addition, the conversion won't be very useful unless your"
echo "usernames are Univerity Netids."
echo
echo "Hit CR to continue."
read foo

echo -e "\n***************\n"
echo "Please login with a CS username (NetID) and password."
echo "The user need not exist on this system. However it must be a faculty"
echo "or someone else authorized to enroll a host in our Kerberos system."
echo "If you aren't a faculty member, and you aren't sure you've been authorized,"
echo "please contact help@cs.rutgers.edu"
echo
echo -n "Username: "
read USERNAME

# prived local port to show server we are root
if ! curl --local-port 1-1023 -u "$USERNAME" -o /tmp/keytable https://$SERVER/accounts/enrollhosts?host=`hostname`; then
echo -e "\n***************\n"
echo "Unable to get key table for this host."
echo
exit 1
# key tables begin with 005 then a version number, which is 2 in our case
elif grep ^$'\05'$'\02' /tmp/keytable; then
mv /tmp/keytable /etc/krb5.keytab
chmod 600 /etc/krb5.keytab
echo "Retrieved apparently valid key table"
echo
elif grep "^Error:" /tmp/keytable ; then
# grep will have printed the error message
# in principle anything else is a valid key table
echo
exit 1
else
echo -e "\n***************\n"
echo "Unable to retrieve key table. Likely cause: bad user name or password."
exit 1
fi

echo -e "\n***************\n"
echo "This script will change the way passwords are checked. You will now use"
echo "your Computer Science password. (The old passwords will still work, but"
echo "if you use them you may not be able to access your files.)"
echo 
echo "There are two choices for who can login:"
echo " 1) Just people listed in /etc/passwd."
echo " 2) just people in a specific group."
echo
echo "The second option takes a few minutes to set up, but it's better if you"
echo "have several computers. With a group, you can add and remove users in one place,"
echo "rather than having to update /etc/passwd on each system."
echo

while true ; do
echo 
echo "Who do you want to be able to login? Enter 1 or 2"
read ANSWER
if test "$ANSWER" = "1" -o "$ANSWER" = "2" ; then
   break;
fi
echo 
echo "Please answer 1 if you want only people in /etc/passwd to be able to"
echo "login, or 2 if you want members of a specified group to be able to login."
done

if test "$ANSWER" = "2" ; then
  echo -e "\n***************\n"
  echo "Please enter the group name. The group must be registered in the computer"
  echo "science server. If you don't have a group, go to"
  echo "https://services.cs.rutgers.edu/accounts and user the group screen to create"
  echo "a group. Please check the box saying that it is a Guest group."
  echo
  echo "Enter group name"
  read GROUP
fi

while true ; do
echo -e "\n***************\n"
echo "Do you want all LCSR systems staff to be able to login to this system?"
echo
echo -n "Please type \"yes\" or \"no\": "
read LCSR
if test "$LCSR" = "yes" -o "$LCSR" = "no" ; then
   break;
fi
done

if test "$DISTRO" = "Ubuntu" ; then

echo -e "\n***************\n"
echo "NOTE: You may need to hit carriage return during ansible installation"
echo

if ! apt-get -qq update || ! apt-get -qq install software-properties-common || ! apt-add-repository ppa:ansible/ansible || ! apt-get -qq update || ! apt-get -qq install ansible git ; then
echo -e "\n***************\n"
echo "apt-get failed"
echo
exit 1
fi

elif test "$DISTRO" = "CentOS" ; then

if ! yum -q -y install ansible git ; then
echo -e "\n***************\n"
echo "yum failed"
echo
exit 1
fi

fi

# /etc/ansible/hosts has parameters that define who can login
# They are created based on the answers given by the user above.

cat > /etc/ansible/hosts <<EOF
# This should have one line beginning with "localhost." The only thing you are likely to 
# change is the grouplist and sudogroups options. Remove them if you want only users in
# /etc/passwd. Otherwise grouplist should have the group whose members you want to be
# able to login. Also include coresysadmins if you want LCSR systems staff to be able
# to login. If you define grouplist, also include sudogroups=slide (or everyone in the
# groups will be able to sudo without a password).
#
# Here's an example that includes both:
#   localhost nfsserver=true local_homedir=true grouplist=coresysadmins,login-research sudogroups=slide net_autofs=true domain=cs.rutgers.edu
# To use /etc/passwd for normal users but still allow LCSR system staff to login use
#   localhost nfsserver=true local_homedir=true grouplist=coresysadmins net_autofs=true domain=cs.rutgers.edu
# To use /etc/passwd and not allow LCSR system staff use
#   localhost nfsserver=true local_homedir=true net_autofs=true domain=cs.rutgers.edu
# If you already have users authorized to sudo, this setup won't disturb them.

EOF
if test "$ANSWER" = 1 ; then
  if test "$LCSR" = "yes" ; then
  echo localhost nfsserver=true local_homedir=true grouplist=coresysadmins net_autofs=true domain=cs.rutgers.edu>> /etc/ansible/hosts
  else
  echo localhost nfsserver=true local_homedir=true net_autofs=true domain=cs.rutgers.edu>> /etc/ansible/hosts
  fi
else
  if test "$LCSR" = "yes" ; then
  echo "localhost nfsserver=true local_homedir=true grouplist=coresysadmins,$GROUP sudogroups=slide net_autofs=true domain=cs.rutgers.edu" >> /etc/ansible/hosts
  else
  echo "localhost nfsserver=true local_homedir=true grouplist=$GROUP sudogroups=slide net_autofs=true domain=cs.rutgers.edu" >> /etc/ansible/hosts
  fi
fi

# now do the real work. 

if ! ansible-pull -f -U https://github.com/clhedrick/kerberos-ansible.git kerberos-boot.yml ; then
echo -e "\n***************\n"
echo "There are two steps to the final software installation. The first failed. We won't"
echo "run the second step until the first one works."
echo
exit 1
fi

if ! ansible-pull -f -U https://github.com/clhedrick/kerberos-ansible.git kerberos.yml ; then
echo -e "\n***************\n"
echo "There final step in setup failed."
echo
exit 1
fi


echo -e "\n***************\n"
echo "You can run this script again if you need to. However we don't recommend doing"
echo "that once Kerberos is set up. If Kerberos is working, there are"
echo "less disruptive ways to update the software or change who can login."
echo 
echo "To update the Rutgers Kerberos software or setup, run"
echo "  ansible-pull -U https://github.com/clhedrick/kerberos-ansible.git kerberos.yml"
echo "Other Kerberos software will be updated by the normal package manager."
echo
echo "If you need to change who can login, edit /etc/ansible/hosts and then run"
echo "  ansible-pull -f -U https://github.com/clhedrick/kerberos-ansible.git kerberos.yml"
echo 
echo "(If you forget this information, just look at the end of the kerberize script.)"
