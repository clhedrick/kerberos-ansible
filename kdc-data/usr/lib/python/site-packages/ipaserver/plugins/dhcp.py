# Authors:
#   Rob Crittenden <rcritten@redhat.com>
#   Pavel Zuna <pzuna@redhat.com>
#   Charles Hedrick <hedrick@rutgers.edu>
#
# Copyright (C) 2009  Red Hat, 2019, Rutgers University
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from ipalib.plugable import Registry
from .baseldap import (
    LDAPObject,
    LDAPCreate,
    LDAPDelete,
    LDAPUpdate,
    LDAPSearch,
    LDAPRetrieve,
    LDAPAddMember,
    LDAPAddAttribute,
    LDAPRemoveAttribute,
    LDAPRemoveMember,
    LDAPAddReverseMember,
    LDAPRemoveReverseMember)
from ipalib import api, Flag, Str, _, ngettext, errors
from ipalib import output
from ipapython.dn import DN
import re
import ipaddress
import socket

__doc__ = _("""
 DHCP
""")

register = Registry()

topic = 'dhcp'

@register()
class dhcpconfig(LDAPObject):
    """
    DHCP object.
    """
    container_dn = DN(('ou', 'dhcp'))
    object_name = _('DHCP configuration')
    object_class = ['dhcpservice']
    default_attributes = ['cn', 'dhcpStatements', 'dhcpoption', 'dhcpcomments']
    allow_rename = False
    label = _('DHCP configuration')
    label_singular = _('DHCP configuration')
    takes_params = (
        Str('cn',
            cli_name='config',
            label=_('config'),
            doc=_('DHCP Configuration - There should be just one, called "config".'),
            primary_key=True,
        ),
        Str('dhcpstatements*',
            cli_name='statements',
            label=_('Statements'),
            doc=_('A DHCP configuration statement other than option'),
        ),
        Str('dhcpoption*',
            cli_name='options',
            label=_('Options'),
            doc=_('A DHCP configuration option'),
        ),
        Str('dhcpcomments?',
            cli_name='comment',
            label=_('comment'),
            doc=_('A DHCP comment'),
        ),
        Flag('increment?',
            cli_name='increment',
            label=_('increment'),
            doc=_('Increment serial number - causes the servers to restart'),
            flags=['virtual_attribute'],
         ),

    )


@register()
class dhcpconfig_mod(LDAPUpdate):
    __doc__ = _('Modify DHCP configuration. Do not use for options or statements unless you want to replace all of them at once. A single argument of "config" must be supplied before the options.')

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        # the option is just the ethernet address, but the LDAP attr has "ethernet " prefix
        attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcpservice', ['dhcpcomments'], dn[1:])

        if 'increment' in options and 'dhcpcomments' in attrs:
            entry_attrs['dhcpcomments'] = str(int(attrs['dhcpcomments'][0]) + 1)
        return entry_attrs.dn
    
    msg_summary = _('Modified DHCP configuration "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpconfig_add_option(LDAPAddAttribute):
    __doc__ = _('Add a DHCP top-level option. The first argument must be "config", followed by the option to be added. It is Normally a quoted pair: "keyword value"')
    attribute = 'dhcpoption'

    msg_summary = _('Modified DHCP configuration "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')
    
@register()
class dhcpconfig_remove_option(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP top-level option. The first argument must be "config", followed by the option to be removed. It is Normally a quoted pair: "keyword value"')

    attribute = 'dhcpoption'

    msg_summary = _('Modified DHCP configuration "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')


@register()
class dhcpconfig_add_statement(LDAPAddAttribute):
    __doc__ = _('Add a DHCP top-level statement. The first argument must be "config", followed by the statement to be added. It is Normally a quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    msg_summary = _('Modified DHCP configuration "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')


@register()
class dhcpconfig_remove_statement(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP top-level statement. The first argument must be "config", followed by the statement to be removed. It is Normally a quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    msg_summary = _('Modified DHCP configuration "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpconfig_show(LDAPRetrieve):
    __doc__ = _('Display information about DHCP configuration. A single argument "config" must always be used')

@register()
class dhcphost(LDAPObject):
    """
    DHCP object.
    """
    def valid_hwaddress(ugettext, value):
        if not re.match('[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]', value):
            return _("hwaddress must be xx:xx:xx:xx:xx:xx, with x a lowercase hex digit")

    container_dn = DN(('cn', 'config'), ('ou', 'dhcp'))
    object_name = _('DHCP host')
    object_class = ['dhcphost']
    default_attributes = ['cn', 'dhcpStatements', 'dhcpoption', 'dhcpcomments', 'dhcphwaddress', 'ingroup']
    allow_rename = False
    label = _('DHCP configuration')
    label_singular = _('DHCP configuration')

    takes_params = (
        Str('cn',
            cli_name='host',
            label=_('Host'),
            doc=_('Host entry name -- normally the DNS hostname, but if there is more than one entry for a host, you can add a suffix to make it unique'),
            primary_key=True,
        ),
        Str('dhcpstatements*',
            cli_name='statements',
            label=_('Statements'),
            doc=_('A DHCP configuration statement other than option'),
        ),
        Str('dhcpoption*',
            cli_name='options',
            label=_('Options'),
            doc=_('A DHCP configuration option'),
        ),
        Str('dhcpcomments?',
            cli_name='comment',
            label=_('Comment'),
            doc=_('A DHCP comment'),
        ),
        Str('dhcphwaddress?',valid_hwaddress,
            cli_name='hwaddress',
            label=_('HWaddress'),
            doc=_('Hardware address, typically in form "ethernet aa:bb:cc:dd:ee:ff", 2-digit hex numbers'),
            required=True,
        ),
        Str('ingroup?',
            cli_name='ingroup',
            label=_('ingroup'),
            doc=_('When creating a host, put it in this group'),
            flags=['virtual_attribute'],
        ),
        Str('hostname?',
            cli_name='hostname',
            label=_('hostname'),
            doc=_('If you need to make the name of the entry something other than the hostname, use this to specify the actual hostname'),
            flags=['virtual_attribute'],
        ),

    )

    # in practice this only is used for create
    def get_dn(self, *keys, **options):
        print(repr(self.primary_key))
        if 'ingroup' in options:
            group = options['ingroup']
            return DN(('cn', keys[0]),('cn', group)) + self.container_dn + self.api.env.basedn
        else:
            return DN(('cn', keys[0])) + self.container_dn + self.api.env.basedn



@register()
class dhcphost_mod(LDAPUpdate):
    __doc__ = _('Modify a DHCP host. Do not use for options or statements unless you want to replace all of them at once')

    msg_summary = _('Modified "%(value)s"')

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        # the option is just the ethernet address, but the LDAP attr has "ethernet " prefix
        if 'dhcphwaddress' in options:
            entry_attrs['dhcphwaddress'] = 'ethernet ' + options['dhcphwaddress']

        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_add_option(LDAPAddAttribute):
    __doc__ = _('Add a DHCP option. Normally quoted pair: "keyword value"')
    attribute = 'dhcpoption'

    # return actual DN to operate on                                                                                                                              
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):                                                              
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_remove_option(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP option. Normally quoted pair: "keyword value"')
    attribute = 'dhcpoption'

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_add_statement(LDAPAddAttribute):
    __doc__ = _('Add a DHCP statement. Normally quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_remove_statement(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP statement. Normally quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_show(LDAPRetrieve):
    __doc__ = _('Display information about a DHCP host.')

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, attrs_list, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcphost_find(LDAPSearch):
    __doc__ = _('Find a DHCP host.')

    msg_summary = ngettext(
        '%(count)d configuration matched', '%(count)d configurations matched', 0
    )
    
    def pre_callback(self, ldap, filter, attrs_list, base_dn, scope, *args, **options):
        print("returning subtree")
        return (filter, base_dn, ldap.SCOPE_SUBTREE)

@register()
class dhcphost_add(LDAPCreate):
    __doc__ = _('Add a new host. Normally this should be the DNS hostname. However if you need more than one entry for a host, you can add a number at the end to make it unique. In that case you\'ll need to add the option \'hostname "REAL HOSTNAME"\' to define the real hostname. You must include actual quotes," ", around the hostname.')

    # default options for new host
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
        host = str(entry_attrs['cn'])
        if 'hostname' in options:
            host = options['hostname']
            
        ip = None
        try:
            ip = socket.gethostbyname(host)
        except:
            raise self.obj.handle_not_found('invalid address')

        # Statements: fixed-address 172.16.68.46
        # Options: host-name "zhu.cs.rutgers.edu"
        if not 'dhcpstatements' in  entry_attrs:
            entry_attrs['dhcpstatements'] = 'fixed-address ' + str(ip)
        if not 'dhcpoption' in entry_attrs:
            entry_attrs['dhcpoption'] = 'host-name "' + str(host) + '"'
        if 'dhcphwaddress' in options:
            entry_attrs['dhcphwaddress'] = 'ethernet ' + options['dhcphwaddress']

        return entry_attrs.dn

    msg_summary = _('Added host "%(value)s"')

@register()
class dhcphost_del(LDAPDelete):
    __doc__ = _('Delete a host.')

    msg_summary = _('Deleted host "%(value)s"')

    # return actual DN to operate on
    def pre_callback(self, ldap, dn, *keys, **options):
        try:
            #def find_entry_by_attr(self, attr, value, object_class, attrs_list=None, base_dn=None):
            entry_attrs = ldap.find_entry_by_attr('cn', keys[0], 'dhcphost', ['dn'], dn[1:])
            return entry_attrs.dn
        except errors.NotFound:
            raise self.obj.handle_not_found(*keys)

@register()
class dhcpsubnet(LDAPObject):
    """
    DHCP object.
    """

    container_dn = DN(('cn', 'config'), ('ou', 'dhcp'))
    object_name = _('DHCP subnet')
    object_class = ['dhcpsubnet','dhcpOptions']
    default_attributes = ['cn', 'dhcpStatements', 'dhcpoption', 'dhcpcomments','dhcpNetMask']
    allow_rename = False
    label = _('DHCP configuration')
    label_singular = _('DHCP configuration')

    def valid_ip(ugettext, value):
        try:
          ipaddress.ip_address(value)
        except ValueError:
          return _("Subnet must be a legal IP address")

    def valid_mask(ugettext, value):
        try:
          mask = int(value)
          if (mask) > 30 or mask < 8:
              return _("Subnet mask must be between 8 and 30")
        except ValueError:
          return _("Subnet mask must be an integer between 8 and 30")

    takes_params = (
        Str('cn', valid_ip,
            cli_name='subnet', 
            label=_('Subnet'),
            doc=_('Subnet -- must be an IP address. CIDR length goes in the netmask option'),
            primary_key=True,
        ),
        Str('dhcpstatements*',
            cli_name='statements',
            label=_('Statements'),
            doc=_('A DHCP configuration statement other than option'),
        ),
        Str('dhcpoption*',
            cli_name='options',
            label=_('Options'),
            doc=_('A DHCP configuration option'),
        ),
        Str('dhcpcomments?',
            cli_name='comment',
            label=_('comment'),
            doc=_('A DHCP comment'),
        ),
        Str('dhcpnetmask', valid_mask,
            cli_name='netmask',
            label=_('netmask'),
            doc=_('Net mask, actually the CIDR bit size, i.e. a small integer'),
            required=True,
        ),

    )


@register()
class dhcpsubnet_mod(LDAPUpdate):
    __doc__ = _('Modify a DHCP subnet. Do not use for options or statements unless you want to replace all of them at once')

    msg_summary = _('Modified DHCP subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_add_option(LDAPAddAttribute):
    __doc__ = _('Add a DHCP option. Normally quoted pair: "keyword value"')
    attribute = 'dhcpoption'
    
    msg_summary = _('Modified DHCP subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_remove_option(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP option. Normally quoted pair: "keyword value"')
    attribute = 'dhcpoption'

    msg_summary = _('Modified DHCP subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_add_statement(LDAPAddAttribute):
    __doc__ = _('Add a DHCP statement. Normally quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    msg_summary = _('Modified DHCP subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_remove_statement(LDAPRemoveAttribute):
    __doc__ = _('Remove a DHCP statement. Normally quoted pair: "keyword value"')
    attribute = 'dhcpstatements'

    msg_summary = _('Modified DHCP subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_show(LDAPRetrieve):
    __doc__ = _('Display information about a DHCP subnet.')

@register()
class dhcpsubnet_find(LDAPSearch):
    __doc__ = _('Find a DHCP subnet.')

    msg_summary = ngettext(
        '%(count)d subnets matched', '%(count)d subnets matched', 0
    )

@register()
class dhcpsubnet_add(LDAPCreate):
    __doc__ = _('Add a new subnet. Should be an IP subnet. The CIDR size must be specified as --netmask. We strongly recommend adding options for at least broadcast-address, routers, and subnet-mask (as an IP address).')
    
    def pre_callback(self, ldap, dn, entry_attrs, attrs_list, *keys, **options):
       if not 'dhcpoption' in  entry_attrs:
          #broadcast-address 172.17.8.223, routers 172.17.8.193, subnet-mask 255.255.255.224
          cidr = entry_attrs['dhcpnetmask']
          net = None
          try: 
             net = ipaddress.IPv4Network(_(str(entry_attrs['cn']) + '/' + str(cidr)))
          except ValueError:
             raise self.obj.handle_not_found('invalid address')
          options = ['broadcast-address ' + str(net.broadcast_address),
                     'subnet-mask ' + str(net.netmask),
                     'routers ' + str(next(net.hosts()))]
          entry_attrs['dhcpoption'] = options
       return dn
    
    msg_summary = _('Added subnets "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

@register()
class dhcpsubnet_del(LDAPDelete):
    __doc__ = _('Delete a host.')

    msg_summary = _('Deleted subnet "%(value)s". Once you have made all your changes to the configuration, make sure to increment the serial number, which is stored in the "comment" attribute. Otherwise the servers won\'t see the changes. Use "ipa dhcpconfig_mod config --increment""')

