from ipaserver.plugins import user
from ipaserver.plugins import group
from ipalib.parameters import Str
from ipalib import _
from ipalib import errors
from ipalib.request import context
from ipaserver.plugins.privilege import principal_has_privilege
import re

user.user.takes_params = user.user.takes_params + (
 Str('samaccountname?',
 cli_name='windowsname',
 label=_('Windows account name'),
 ),
)
user.user.default_attributes.append('samaccountname')

group.group.takes_params = group.group.takes_params + (
 Str('businesscategory*',
 cli_name='categories',
 label=_('Categories (specify "login" for login group)'),
 ),
)
group.group.default_attributes.append('businesscategory')

group.group.takes_params = group.group.takes_params + (
 Str('host*',
 cli_name='hosts',
 label=_('Hosts (use as cluster names for login group)'),
 ),
)
group.group.default_attributes.append('host')

def useradd_precallback(self, ldap, dn, entry, attrs_list,
*keys, **options):
    if 'samaccountname' not in entry.keys():
        entry['samaccountname'] = entry['uid']
    if 'mail' not in entry.keys():
        entry['mail'] = entry['uid'] + '@rutgers.edu'
    if 'gidnumber' not in entry.keys():
        entry['gidnumber'] = '1234'
    return dn

user.user_add.register_pre_callback(useradd_precallback, first=True)

# For some reason this ignores the text in cli_name and label

group.group.takes_params = group.group.takes_params + (
 Str('owner*',
 cli_name='owners',
 label=_('Owners'),
 normalizer=lambda value: value if ',' in value else 'uid=' + value + ',cn=users,cn=accounts,dc=cs,dc=rutgers,dc=edu',
 ),
)

group.group.default_attributes.append('owner')

def groupadd_precallback(self, ldap, dn, entry, attrs_list,
*keys, **options):

    # admin is allowed to add any group. otherwise can't look like netid
    if principal_has_privilege(self.api, context.principal, 'Group Administrators'):
        return dn

    name = entry['cn']
    if re.match("^[a-z]{1,8}([0-9]+)?$", name) is not None:
        err = _("cannot look like a NetID: {name}").format(name=name)
        raise errors.ValidationError(name='Group name', error=err)
    return dn

group.group_add.register_pre_callback(groupadd_precallback, first=True)

user.user.takes_params = user.user.takes_params + (
 Str('dellemcgroup?',
 cli_name='dellgroup',
 label=_('Dell Group'),
 doc=_('Dell Group: sysadmin, secadmin, netadmin, or netoperator'),
 ),
)

user.user.default_attributes.append('dellemcgroup')
