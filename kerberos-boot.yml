---

# I do flush handlers whenever I trigger a handler. I've had issues where
# the script fails. But when you rerun it a start or restart is missed because
# the thing that triggered it is already there.

# I do my best to display "changed" when something changes. With scripts and commands
#   I have to use changed_when to compute when something has changed
# Similarly, when a command can fail and that's OK, I use failed_when: false, so the 
#   user doesn't get warnings that something failed
# Register takes the results of a command and puts it in a variable. The results are
#   normally a dictionary. Try ansible-playbook -v to see what is actually put in the variable
#   Register is needed to get the data for the changed_when 

- hosts: testhosts dresden faculty research staff services ilab studentvms grad apps coredev special researchuser localhost wiselab lilab apps-old localhost
  become: true
  environment:
    PATH: "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"

# NB: become: true affects local_action as well as remote
# sometimes we need to run this with become-method: su. In general
# the users running this can't su locally without typing the root
# password. The local actions used here don't actually need to be root,
# so all local_action steps set become: no
  tasks:

# ansible_connection will change for local operations. We need to know
# about the main connection
   - name: set islocal 
     set_fact: islocal="{{ansible_connection == 'local'}}"

# verify we have fqdn

   - name: verify host uses fqdn
     when: not '.' in ansible_fqdn
     fail: msg="hostname must be full qualified domain name"

   - name: load config for distribution
     include_vars: "os-vars/{{ ansible_distribution }}.{{ansible_distribution_major_version}}.yml"

# ipa-client-install will do some of this, but by doing it separately
# the script works better if something fails and I have to redo it

   - name: install packages
     package: name={{ boot_packages }} state=installed

# will remove krb5.conf and recreate /etc/ssh/ssh_host* if keytab is for the wrong host
# presumably a VM got copied or a host got renamed
## this does work, but it's a bit dangerous. if a machine is renamed, let the sysadmin 
## delete /etc/krb5.keytab and make sure there are new ssh keys
   - name: check if keytsb is for right host
     script: "{{ playbook_dir }}/kerberos-files/scripts/checkkeytab"
     register: checkkeytab
     changed_when: "'changed' in checkkeytab.stdout_lines"

   - name: check whether /etc/krb5.keytab is set up
     stat: path=/etc/krb5.keytab
     register: keytab
   - name: create key table
     local_action: command "{{ playbook_dir }}/kerberos-files/scripts/enroll-host" {{ ansible_fqdn }} {{ cluster|default('none') }}
     become: false
     when: not keytab.stat.exists
   - name: send keytab to remote
     copy: src=/tmp/{{ ansible_fqdn }}.kt dest=/etc/krb5.keytab owner=root mode=0600
     when: not keytab.stat.exists
   - name: remove local copy of key table
     local_action: file path=/tmp/{{ ansible_fqdn }}.kt state=absent
     become: false

# nfs/service if needed
   - name: nfs server package if needed
     when: nfsserver is defined and nfsserver == 'true' and nfs_server_package is defined
     package: name="{{ nfs_server_package }}" state=present

# set up chrony. Time needs to be right for other things to work
   - name: disable ntp if there
     when: chrony_broken is not defined
     service: name={{ ntp_name }} enabled=no state=stopped
     failed_when: false
   - name: disable ntpdate if there
     when: ntpdate_name != '' and chrony_broken is not defined
     service: name={{ ntpdate_name }}  enabled=no state=stopped
     failed_when: false
   - name: install chrony config
     when: chrony_broken is not defined
     copy: src="{{ playbook_dir }}/kerberos-files/etc/chrony.conf" dest=/etc/chrony.conf owner=root mode=0644
   - name: enable chrony
     when: chrony_broken is not defined
     service: name={{ chrony_name }} enabled=yes state=started
# u14: service ntp

# there are several types of cert. Just to be clear, this one is
# the internet2 chain, used to sign the commercial certs for ldaps and https
   - name: need cacert file
     copy: src="{{ playbook_dir }}/kerberos-files/copy/etc/krb5.i2chain.pem" dest=/etc/krb5.i2chain.pem owner=root mode=0644
   - name: make sure GSSAPI in set in sshd
     lineinfile:
       path: /etc/ssh/sshd_config
       regexp: '(?i)^\s*GSSAPIAuthentication\s+yes\s*$'
       insertafter: '(?i)^\s*#\s*GSSAPI\s*options\s*'
       line: 'GSSAPIAuthentication yes'
       state: present
     notify: 
       - restart sshd
   - meta: flush_handlers

# do this in bootstrap so we can do other updates without sudo password
   - name: lcsr sudoers
     template: src="{{ playbook_dir }}/kerberos-files/etc/sudoers.d/lcsr" dest=/etc/sudoers.d/lcsr mode=0600 owner=root

   - name: remove /etc/cron.d/rpmforcefile-krb5.conf
     file: path=/etc/cron.d/rpmforcefile-krb5.conf state=absent

# with ipa client
   - name: prepare for sssd
     when: has_ipaclient
     command: mv /etc/krb5.keytab /etc/krb5.keytab.hold
     args:
       creates: /var/lib/ipa-client/sysrestore/sysrestore.index     
# this is a hack. something in our installation script is changing files needed by the python code
# for the moment only do this for centos 7
   - name: reinstall python modules
     when: reinstall_python_libs is defined and reinstall_python_libs and ansible_pkg_mgr == 'yum'
     command: yum -y reinstall python2-ipaclient python2-ipalib
     args:
       creates: /var/lib/ipa-client/sysrestore/sysrestore.index     
   - name: set up sssd
     when: has_ipaclient
     command: ipa-client-install -U --ca-cert-file=/etc/krb5.i2chain.pem --no-ntp --no-sudo -k /etc/krb5.keytab.hold --domain={{ domain }}
     args:
       creates: /var/lib/ipa-client/sysrestore/sysrestore.index
     notify:
       - restart systemd-logind

# add nfs service key if needed. do after ipa-client-install as that resets key table
   - name: see if nfs service key in key table
     when: nfsserver is defined and nfsserver == 'true'
     shell: klist -k -t /etc/krb5.keytab | grep nfs/
     register: checknfskey2
     changed_when: "'nfs/' not in checknfskey2.stdout"
# 
# if it's not there the grep will fail     
     failed_when: false

# need to add NFS key
# In pull mode. have to do it on the target host. This is the best we can do without real absurdity.
# generally pull mode means the sysadmin is initiating it. The script for doing that always adds an NFS
# key. We only need this is ipa-client-install has lost it. So it will only be done on systems that
# actually have ipa-getkeytab.
   - name: add nfs service key if needed, pull mode
     when: nfsserver is defined and nfsserver == 'true' and 'nfs/' not in checknfskey2.stdout and islocal and has_ipaclient
     shell: kinit -k -t /etc/krb5.keytab host/{{ ansible_fqdn }}; /usr/sbin/ipa-getkeytab -p nfs/{{ ansible_fqdn }} -k /etc/krb5.keytab; kdestroy

# add NFS key push mode. this should always work
   - name: add nfs service key if needed, push mode
     when: nfsserver is defined and nfsserver == 'true' and 'nfs/' not in checknfskey2.stdout and not islocal
     local_action: command "{{ playbook_dir }}/kerberos-files/scripts/make-nfs-principal" {{ ansible_fqdn }}
     become: false
   - name: send nfs key to remote
     when: nfsserver is defined and nfsserver == 'true' and 'nfs/' not in checknfskey2.stdout and not islocal
     copy: src=/tmp/{{ ansible_fqdn }}-nfs.kt dest=/etc/krb5.nfskey owner=root mode=0600
   - name: add nfskey to keytab and delete
     when: nfsserver is defined and nfsserver == 'true' and 'nfs/' not in checknfskey2.stdout and not islocal
     script: "{{ playbook_dir }}/kerberos-files/scripts/add-nfs-principal"
   - name: remove local copy of key table
     local_action: file path=/tmp/{{ ansible_fqdn }}-nfs.kt state=absent
     become: false

# without ipa client
   - name: krb5.conf
     when: not has_ipaclient
     template: src="{{ playbook_dir }}/kerberos-files/etc/krb5.conf" dest=/etc/krb5.conf owner=root mode=0644
   - name: /etc/sssd/sssd.conf
     template: src="{{ playbook_dir }}/kerberos-files/etc/sssd/sssd.conf" dest=/etc/sssd/sssd.conf mode=0600 owner=root
     notify: 
     - restart sssd
     - restart systemd-logind
   - meta: flush_handlers

# kerberos.yml only works if the host is usably kerberized
#   sss installation should do that, but in one case found nsswitch.conf
#   didn't have sss. So do it here
# nsswitch.conf is slightly different for ubuntu
   - name: nsswitch.conf
     template: src="{{ playbook_dir }}/kerberos-files/etc/nsswitch.conf" dest=/etc/nsswitch.conf owner=root mode=0644

# capture ssh keys if needed 
   - name: get host keys from remote
     when: pullmode is not defined or not pullmode
     shell: cat /etc/ssh/ssh_host_*.pub
     register: rsakey
     changed_when: false

   - name: set host keys in ipa if needed
     when: pullmode is not defined or not pullmode
     local_action: command "{{ playbook_dir }}/kerberos-files/scripts/set-host-keys" "{{ ansible_fqdn }}" 
     become: no
     args:
       stdin: "{{ rsakey.stdout }}"
     register: sethost
     changed_when: "'changed' in sethost.stdout_lines"

   - name: kill nscd
     service: name=nscd enabled=no state=stopped
     failed_when: false

# NFS stuff

### idmapd

   - name: idmapd.conf
     lineinfile:
       path: /etc/idmapd.conf
       regexp: '(?i)^\s*Domain\s*='
       line: 'Domain = cs.rutgers.edu'
       insertafter: '(?i)[[]General]'
       state: present

# centos starts it if it is configured
   - name: idmapd enabled
     when: need_idmapd_start
     service: name={{ idmapd_service }} enabled=yes

### rpc.gssd

# ubuntu
   - name: nfs-common
     when: need_gssd_in_nfscommon
     lineinfile:
       path: /etc/default/nfs-common
       regexp: '^\s*NEED_GSSD\s*='
       line: 'NEED_GSSD=yes'
       state: present

# for centos 6 and SLES
   - name: secure nfs
     when: need_securenfs_in_nfs
     lineinfile:
       path: /etc/sysconfig/nfs
       regexp: '^\s*{{ securenfs_in_nfs }}\s*='
       line: '{{ securenfs_in_nfs }}=yes'
       state: present

# for centos 7 it starts if /etc/krb5.keytab exists

# on most systems it's started implicitly. But on Ubuntu it has to be started
   - name: gssd enabled
     when: need_gssd_start
     service: name={{ gssd_service }} enabled=yes

## starting. make sure idmapd and gssd are running
## if we have to start them also restart nfs

   - name: start idmapd if necessary
     when: need_idmapd_start
     service: name={{ idmapd_service }} state=started
     notify:
       - restart nfs

   - name: start gssd if necessary
     service: name={{ gssd_service }} state=started 
     notify:
       - restart nfs

   - meta: flush_handlers

# centos has a parameter, ubuntu requires hacking the startup. yuck.
   - name: gssd.conf
     when: gssd_param_in_script
     lineinfile:
       path: /etc/init/gssd.conf
       regexp: '^\s*exec\s+rpc.gssd'
       line: 'exec rpc.gssd -t 600'
       state: present
     notify:
       - restart gssd
   - meta: flush_handlers

   - name: /etc/systemd/system/rpc-gssd.service.d/time.conf
     when: gssd_param_in_systemd_file is defined
     copy: src="{{ playbook_dir }}/kerberos-files/etc/systemd/system/rpc-gssd.service.d/" dest=/etc/systemd/system/rpc-gssd.service.d
     notify:
       - daemon reload
       - restart gssd
   - meta: flush_handlers

# nfs server for ubuntu
   - name: nfs-kernel-server
     when: need_svcgssd_in_nks and nfsserver is defined and nfsserver == 'true'
     lineinfile:
       path: /etc/default/nfs-kernel-server
       regexp: '^\s*NEED_SVCGSSD'
       line: 'NEED_SVCGSSD="yes"'
       state: present
     notify:
       - restart nfs-kernel-server
       - restart idmapd
   - meta: flush_handlers

# centos version is easier
   - name: systemconfig/nfs
     when: gssd_param_in_sysconf
     lineinfile:
       path: /etc/sysconfig/nfs
       regexp: '^\s*{{ gssd_param_name_sysconf }}\s*='
       line: '{{ gssd_param_name_sysconf }}="-t 600"'
       state: present
     notify:
       - restart gssd
   - meta: flush_handlers

  handlers:
    - name: restart sshd
      service: name={{ ssh_service }} state=restarted enabled=yes
    - name: restart sssd
      service: name=sssd state=restarted enabled=yes
    - name: daemon reload
      command: systemctl daemon-reload
    - name: restart gssd
      service: name={{ gssd_service }} state=restarted
    - name: restart nfs
      when: need_nfs_start
      service: name=nfs state=restarted
    - name: restart nfs-kernel-server
      when: need_nfs_server_start
      service: name={{ nfs_server_name }} state=restarted
    - name: restart idmapd
      when: need_idmapd_start
      service: name={{ idmapd_service }} state=restarted
# ubuntu 16 we have to restart systemd-login after installing sssd, or
# pam_systemd will fail to create a new session. Don't know why, and 
# it may not always happen
    - name: restart systemd-logind
      when: need_logind_restart is defined and need_logind_restart
      service: name=systemd-logind state=restarted
